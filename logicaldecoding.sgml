<!-- doc/src/sgml/logicaldecoding.sgml -->
 <chapter id="logicaldecoding">
  <title>논리적 디코딩</title>
  <indexterm zone="logicaldecoding">
   <primary>논리적 디코딩</primary>
  </indexterm>
  <para>
   PostgreSQL은 데이터베이스 서버에서 발생한 자료 변경 내용을
   스트리밍 방식으로 외부로 전달 할 수 있다.  이 기능은 복제나
   감사 솔루션을 포함하는 다양한 솔루션의 수단으로 사용될 수 있다.
  </para>

  <para>
   스트림으로 보내는 변경분은 논리적 복제 슬롯으로 식별한다.
  </para>

  <para>
   스트리밍 내용의 형식은 사용하는 출력 플러그인이 구현한다.  플러그인
   예제는 PostgreSQL 배포판에 포함되어 있다.  다른 플러그인도
   서버 코드의 변경 없이 제작자의 의도에 따라 직접 만들 있도록
   설계되었다.  모든 출력 플러그인은 
   <command>INSERT</command>, <command>UPDATE</command>
   명령으로 만들어지는 개별 새로운 로우와, 
   <command>UPDATE</command>, <command>DELETE</command> 명령으로
   처리된 삭제 처리할 로우 정보 (이것은 해당 테이블의
   <xref linkend="sql-createtable-replica-identity"/>  옵션에서
   지정한다)를 다룰 수 있다.
  </para>

  <para>
   자료 변경분은 복제 프로토콜
   을 이용해서 전달하거나(<xref linkend="protocol-replication"/>, 
   <xref linkend="logicaldecoding-walsender"/> 참조),
   SQL(<xref linkend="logicaldecoding-sql"/> 참조) 구문으로
   사용할 수 있다.  또한 직접 그 변경분을 사용하는 
   플러그인을 만들 수 도 있다. (<xref linkend="logicaldecoding-writer"/> 참조)
  </para>

  <sect1 id="logicaldecoding-example">
   <title>논리적 디코딩 예제</title>

   <para>
    다음은 논리적 디코딩을 사용하는 예제다.
   </para>

   <para>
    논리적 디코딩을 사용하려면, 먼저 <xref linkend="guc-wal-level"/>
    환경 설정값을 <literal>logical</literal>로,
    <xref linkend="guc-max-replication-slots"/> 설정값은 1이상으로
    설정 되어 있어야 한다.  다음 대상 데이터베이스(아래 예제에서는
    <literal>postgres</literal>)는 
    슈퍼유저로 접속 해야 한다.
   </para>

<programlisting>
postgres=# -- 슬롯 이름은 'regression_slot'로 출력 플러그인은 'test_decoding' 사용하는 논리적 복제 슬롯을 만든다.
postgres=# SELECT * FROM pg_create_logical_replication_slot('regression_slot', 'test_decoding');
    slot_name    |    lsn
-----------------+-----------
 regression_slot | 0/16B1970
(1 row)

postgres=# SELECT slot_name, plugin, slot_type, database, active, restart_lsn, confirmed_flush_lsn FROM pg_replication_slots;
    slot_name    |    plugin     | slot_type | database | active | restart_lsn | confirmed_flush_lsn
-----------------+---------------+-----------+----------+--------+-------------+-----------------
 regression_slot | test_decoding | logical   | postgres | f      | 0/16A4408   | 0/16A4440
(1 row)

postgres=# -- 아직 원본 서버에서 변경된 부분이 없다
postgres=# SELECT * FROM pg_logical_slot_get_changes('regression_slot', NULL, NULL);
 lsn | xid | data
-----+-----+------
(0 rows)

postgres=# CREATE TABLE data(id serial primary key, data text);
CREATE TABLE

postgres=# -- DDL 구문은 복제되지 않는다. 그래서 다음과 같이 보인다.
postgres=# SELECT * FROM pg_logical_slot_get_changes('regression_slot', NULL, NULL);
    lsn    | xid |    data
-----------+-----+------------
 0/16D5D48 | 688 | BEGIN 688
 0/16E0380 | 688 | COMMIT 688
(2 rows)

postgres=# -- 변경 사항을 한 번 꺼냈기 때문에 더 이상 변경 분이 없다면
postgres=# -- 같은 명령에 대해서 다음과 같이 아주 내용도 보여주지 않는다.
postgres=# SELECT * FROM pg_logical_slot_get_changes('regression_slot', NULL, NULL);
 lsn | xid | data
-----+-----+------
(0 rows)

postgres=# BEGIN;
postgres=# INSERT INTO data(data) VALUES('1');
postgres=# INSERT INTO data(data) VALUES('2');
postgres=# COMMIT;

postgres=# SELECT * FROM pg_logical_slot_get_changes('regression_slot', NULL, NULL);
    lsn    | xid |                     data
-----------+-----+-----------------------------------------------
 0/16E0478 | 689 | BEGIN 689
 0/16E0478 | 689 | table public.data: INSERT: id[integer]:1 data[text]:'1'
 0/16E0580 | 689 | table public.data: INSERT: id[integer]:2 data[text]:'2'
 0/16E0650 | 689 | COMMIT 689
(4 rows)

postgres=# INSERT INTO data(data) VALUES('3');

postgres=# -- 변경 사항 확인, 꺼낸 것 아님
postgres=# SELECT * FROM pg_logical_slot_peek_changes('regression_slot', NULL, NULL);
    lsn    | xid |                     data
-----------+-----+-----------------------------------------------
 0/16E09C0 | 690 | BEGIN 690
 0/16E09C0 | 690 | table public.data: INSERT: id[integer]:3 data[text]:'3'
 0/16E0B90 | 690 | COMMIT 690
(3 rows)

postgres=# -- pg_logical_slot_peek_changes() 함수 기능 확인
postgres=# SELECT * FROM pg_logical_slot_peek_changes('regression_slot', NULL, NULL);
    lsn    | xid |                     data
-----------+-----+-----------------------------------------------
 0/16E09C0 | 690 | BEGIN 690
 0/16E09C0 | 690 | table public.data: INSERT: id[integer]:3 data[text]:'3'
 0/16E0B90 | 690 | COMMIT 690
(3 rows)

postgres=# -- 출력 플러그인의 옵션 사용
postgres=# SELECT * FROM pg_logical_slot_peek_changes('regression_slot', NULL, NULL, 'include-timestamp', 'on');
    lsn    | xid |                     data
-----------+-----+-----------------------------------------------
 0/16E09C0 | 690 | BEGIN 690
 0/16E09C0 | 690 | table public.data: INSERT: id[integer]:3 data[text]:'3'
 0/16E0B90 | 690 | COMMIT 690 (at 2014-02-27 16:41:51.863092+01)
(3 rows)

postgres=# -- 더 이상 사용하지 않는 논리 복제 슬롯은 서버 자원에서 지워야 한다.
postgres=# SELECT pg_drop_replication_slot('regression_slot');
 pg_drop_replication_slot
-----------------------

(1 row)
</programlisting>

   <para>
    다음 예제는 <xref linkend="app-pgrecvlogical"/> 프로그램을 이용한
    서버 외부에서 변경 자료를 활용하는 방법이다.  이 프로그램은
    PostgreSQL 배포판에 포함되어 있으며, 이때 자료를 전달하는 기법은 
    스트리밍 복제 프로토콜을 이용한다.  이 때는
    해당 프로그램이 스트리밍 복제를 위해 해당 데이터베이스에
    접속할 수 있어야 하며
    (<xref linkend="streaming-replication-authentication"/> 참조),
    해당 서버의 <varname>max_wal_senders</varname> 설정값이 
    그 접속 세션 수 보다는 커야한다.
   </para>
<programlisting>
$ pg_recvlogical -d postgres --slot=test --create-slot
$ pg_recvlogical -d postgres --slot=test --start -f -
<keycombo action="simul"><keycap>Control</keycap><keycap>Z</keycap></keycombo>
$ psql -d postgres -c "INSERT INTO data(data) VALUES('4');"
$ fg
BEGIN 693
table public.data: INSERT: id[integer]:4 data[text]:'4'
COMMIT 693
<keycombo action="simul"><keycap>Control</keycap><keycap>C</keycap></keycombo>
$ pg_recvlogical -d postgres --slot=test --drop-slot
</programlisting>
  </sect1>

  <sect1 id="logicaldecoding-explanation">
   <title>논리적 디코딩 개념</title>
   <sect2>
    <title>논리적 디코딩</title>

    <indexterm>
     <primary>논리적 디코딩</primary>
    </indexterm>

    <para>
     논리적 디코딩이란 데이터베이스의 내부 상태에 대한 자세한 
     지식이 없이 데이터베이스의 모든 영구적인 변경 사항을 
     일관되고, 이해하기 쉬운 형식으로 해석하는 절차다.
    </para>

    <para>
     <productname>PostgreSQL</productname>의 논리적 디코딩은
     저장 단계의 변경 사항을 포함하는
     <link linkend="wal">미리 쓰는 로그</link>의 내용을 
     응용프로그램 차원에서 다시 사용할 수 있도록
     자료의 내용이나, SQL 구문으로 다시 풀이하는 것이다.
    </para>
   </sect2>

   <sect2 id="logicaldecoding-replication-slots">
    <title>복제 슬롯</title>

    <indexterm>
     <primary>복제 슬롯</primary>
     <secondary>논리적 복제</secondary>
    </indexterm>

    <para>
     논리적 복제 관점에서 보면, 하나의 슬롯은 
     원본 서버에서 만들어진 변경 사항을 클라이언트가 
     순차적으로 다시 실행 할 수 있도록 그 내용을 보관하는 곳이다.
     각각의 슬롯은 그 데이터베이스의 변경 사항을 각각의 출력
     플러그인으로 보내는 역할을 한다.
    </para>

    <note>
     <para><productname>PostgreSQL</productname>에는 스트리밍 복제
     (<xref linkend="streaming-replication"/> 참조) 슬롯도
     있지만 서로 다르게 사용된다.
     </para>
    </note>

    <para>
     하나의 복제 슬롯은 <productname>PostgreSQL</productname> 클러스터
     단위로 구분된다. 즉 모든 데이터베이스를 포함한다.
     슬롯은 언제든지 다시 접속하면 이어서 사용할 수 있도록 설계되었다.
    </para>

    <para>
     논리적 슬롯은 일반적인 경우 한 번의 요청에 한 번의 변경 사항만 전달 한다.
     현재 위치는 체크포인트 작업으로만 영구 기록된다.  따라서
     서버의 비정상적인 종료 뒤 다시 시작되면, 이미 보냈던 변경 사항을
     다시 볼 낼 수 있다.
     따라서 논리적 디코딩을 사용하는 클라이언트는 
     이미 반영된 변경 사항을 중복해서 반영하는 문제를 피할 방법을 
     마련해 두어야 한다.  클라이언트는 논리적 디코딩 작업을 시작하려고, 
     서버에 접속해서 변경 사항을 가져올 때, 자신의 마지막 처리한
     LSN 보다 이전 변경 사항들이 있으면 그것을 통과하는 처리를 
     해야 할 경우도 있을 것이다.  복제 과정 추적 기능은 이 중복 방지 
     목적으로 제공한다.  자세한 설명은
     <link linkend="replication-origins">복제 원본</link>에서 한다.
    </para>

    <para>
     하나의 데이터베이스 서버에서 여러 개의 독립된 슬롯을 사용할 수 있다.
     데이터베이스 변경 내역 가운데, 현재 각 슬롯 단위로
     자신의 처리 상태를 관리한다.  각 응용프로그램은 자기가 사용할 
     슬롯을 각각 사용하면 될 것이다.
    </para>

    <para>
     논리적 복제 슬롯은 그 슬롯을 사용하는 응용프로그램(수신자)의 상태는 
     알 수 없다.  또한 여러 다른 응용프로그램이 같은 슬롯을 서로
     다른 시간에 사용할 수도 있다.  이 때는 그 응용프로그램이
     마지막 반영한 변경 사항을 기억하고 있어야 할 것이다.  이때 서버의
     슬롯 상태 변경은 하나의 응용프로그램만 해야 할 것이다.
    </para>

    <caution>
     <para>
      복제 슬롯은 서버 장애 상황에서도 안전하게 유지되도록 설계되었으며, 
      그 슬롯을 사용하는 응용프로그램의 상태는 알 수 없다.  따라서, 
      해당 슬롯이 전혀 사용되지 않을 수도 있다.  이런 경우, 아직
      반영하지 않은(응용프로그램에서 사용하지 않은) WAL 파일을 
      계속 보관하고, 데이터 파일의 폐기된 로우에 대해서도
      <command>VACUUM</command> 작업에서 제외된다.
      이 대로 계속 유지된다면, 트랜잭션 ID 겹침 방지 정책에 따라 
      데이터베이스 사용을 더 이상 못하게 된다.
      이런 이유로 사용하지 않는 슬롯은 반드시 삭제 되어야 한다.
     </para>
    </caution>
   </sect2>

   <sect2>
    <title>출력 플러그인</title>
    <para>
     출력 플러그인은 복제 슬롯에서 지정한 응용프로그램(수신자)에게
     미리 기록한 로그의 내부 내용을 분석해서, 
     그 응용프로그램이 사용할 수 있는 양식으로 자료를 변경해서
     전달하는 역할을 한다.
    </para>
   </sect2>

   <sect2>
    <title>스냅샷 추출</title>
    <para>
     스트리밍 복제 인터페이스(<xref linkend="protocol-replication-create-slot"/> 참조)를 이용해서 새로운 복제 슬롯이 만들어질 때,
     스냅샷이 추출된다(<xref linkend="functions-snapshot-synchronization"/> 참조).
     슬롯이 만들어지는 시점 이후부터 데이터베이스의 변경 사항을 보관함을 
     의미한다.  이 기능은 <link linkend="sql-set-transaction"><literal>SET TRANSACTION
     SNAPSHOT</literal></link> 명령을 사용해서 새로운 
     복제본을 만드는데 사용할 수 있다.
     이렇게 해서, 그 뒤에 발생하는 자료 변경에 관계 없이
     데이터베이스의 한 시점을 기준으로 덤프하는 트랜잭션으로 사용할 수 있다.
    </para>
    <para>
     Creation of a snapshot is not always possible.  In particular, it will
     fail when connected to a hot standby.  Applications that do not require
     snapshot export may suppress it with the <literal>NOEXPORT_SNAPSHOT</literal>
     option.
    </para>
   </sect2>
  </sect1>

  <sect1 id="logicaldecoding-walsender">
   <title>스트리밍 복제 프로토콜 인터페이스</title>

   <para>
    이 프로토콜 명령은 다음과 같다.
    <itemizedlist>
     <listitem>
      <para><literal>CREATE_REPLICATION_SLOT <replaceable>슬롯이름</replaceable> LOGICAL <replaceable>출력플러그인</replaceable></literal></para>
     </listitem>

     <listitem>
      <para><literal>DROP_REPLICATION_SLOT <replaceable>slot_name</replaceable></literal> <optional> <literal>WAIT</literal> </optional></para>
     </listitem>

     <listitem>
      <para><literal>START_REPLICATION SLOT <replaceable>슬롯이름</replaceable> LOGICAL ...</literal></para>
     </listitem>
    </itemizedlist>
    각각 슬롯을 만들고, 지우고, 복제를 시작하는 역할을 한다.  이 명령은 
    SQL 구문이 아니라, 복제용 접속 상태에서 사용 가능한 것들이다.
    이 명령에 대한 자세한 설명은 <xref linkend="protocol-replication"/>에서 다룬다.
   </para>

   <para>
    <xref linkend="app-pgrecvlogical"/> 프로그램이 
    스트리밍 복제 접속을 하며, 내부적으로 이런 명령을 사용한다.
   </para>
  </sect1>

  <sect1 id="logicaldecoding-sql">
   <title>논리적 디코딩 <acronym>SQL</acronym> 인터페이스</title>

   <para>
     논리적 디코딩 처리를 위한 SQL-수준의 AIP는 
     <xref linkend="functions-replication"/>절에서 자세히 다룬다.
   </para>

   <para>
    동기식 복제(<xref linkend="synchronous-replication"/> 참조)는
    이 SQL 방식으로는 구현이 불가능하며, 스트리밍 복제 인터페이스로만 가능하다.
    함수 인터페이스, 추가적이고, 비핵심적인 인터페이스는
    동기식 복제를 지원하지 않는다.
   </para>
  </sect1>

  <sect1 id="logicaldecoding-catalogs">
   <title>논리적 디코딩과 관계된 시스템 카탈로그</title>

   <para>
    <link linkend="view-pg-replication-slots"><structname>pg_replication_slots</structname></link>
    뷰와
    <link linkend="pg-stat-replication-view"><structname>pg_stat_replication</structname></link>
    뷰에서 현재 복제 슬롯에 대한 등록정보와 
    현재 스트리밍 복제 접속을 이용해서 사용중인 복제 상태 정보를 제공한다.
    이들은 물리적 복제와 논리적 복제 모두 지원한다.
   </para>
  </sect1>

  <sect1 id="logicaldecoding-output-plugin">
   <title>논리적 디코딩 출력 플러그인</title>
   <para>
    An example output plugin can be found in the
    <link linkend="test-decoding">
     <filename>contrib/test_decoding</filename>
    </link>
    subdirectory of the PostgreSQL source tree.
   </para>
   <sect2 id="logicaldecoding-output-init">
    <title>Initialization Function</title>
    <indexterm zone="logicaldecoding-output-init">
     <primary>_PG_output_plugin_init</primary>
    </indexterm>
    <para>
     An output plugin is loaded by dynamically loading a shared library with
     the output plugin's name as the library base name. The normal library
     search path is used to locate the library. To provide the required output
     plugin callbacks and to indicate that the library is actually an output
     plugin it needs to provide a function named
     <function>_PG_output_plugin_init</function>. This function is passed a
     struct that needs to be filled with the callback function pointers for
     individual actions.
<programlisting>
typedef struct OutputPluginCallbacks
{
    LogicalDecodeStartupCB startup_cb;
    LogicalDecodeBeginCB begin_cb;
    LogicalDecodeChangeCB change_cb;
    LogicalDecodeTruncateCB truncate_cb;
    LogicalDecodeCommitCB commit_cb;
    LogicalDecodeMessageCB message_cb;
    LogicalDecodeFilterByOriginCB filter_by_origin_cb;
    LogicalDecodeShutdownCB shutdown_cb;
} OutputPluginCallbacks;

typedef void (*LogicalOutputPluginInit) (struct OutputPluginCallbacks *cb);
</programlisting>
     The <function>begin_cb</function>, <function>change_cb</function>
     and <function>commit_cb</function> callbacks are required,
     while <function>startup_cb</function>,
     <function>filter_by_origin_cb</function>, <function>truncate_cb</function>,
     and <function>shutdown_cb</function> are optional.
     If <function>truncate_cb</function> is not set but a
     <command>TRUNCATE</command> is to be decoded, the action will be ignored.
    </para>
   </sect2>

   <sect2 id="logicaldecoding-capabilities">
    <title>Capabilities</title>

    <para>
     To decode, format and output changes, output plugins can use most of the
     backend's normal infrastructure, including calling output functions. Read
     only access to relations is permitted as long as only relations are
     accessed that either have been created by <command>initdb</command> in
     the <literal>pg_catalog</literal> schema, or have been marked as user
     provided catalog tables using
<programlisting>
ALTER TABLE user_catalog_table SET (user_catalog_table = true);
CREATE TABLE another_catalog_table(data text) WITH (user_catalog_table = true);
</programlisting>
     Any actions leading to transaction ID assignment are prohibited. That, among others,
     includes writing to tables, performing DDL changes, and
     calling <literal>txid_current()</literal>.
    </para>
   </sect2>

   <sect2 id="logicaldecoding-output-mode">
    <title>Output Modes</title>

    <para>
     Output plugin callbacks can pass data to the consumer in nearly arbitrary
     formats. For some use cases, like viewing the changes via SQL, returning
     data in a data type that can contain arbitrary data (e.g., <type>bytea</type>) is
     cumbersome. If the output plugin only outputs textual data in the
     server's encoding, it can declare that by
     setting <literal>OutputPluginOptions.output_type</literal>
     to <literal>OUTPUT_PLUGIN_TEXTUAL_OUTPUT</literal> instead
     of <literal>OUTPUT_PLUGIN_BINARY_OUTPUT</literal> in
     the <link linkend="logicaldecoding-output-plugin-startup">startup
     callback</link>. In that case, all the data has to be in the server's encoding
     so that a <type>text</type> datum can contain it. This is checked in assertion-enabled
     builds.
    </para>
   </sect2>

   <sect2 id="logicaldecoding-output-plugin-callbacks">
    <title>Output Plugin Callbacks</title>

    <para>
     An output plugin gets notified about changes that are happening via
     various callbacks it needs to provide.
    </para>

    <para>
     Concurrent transactions are decoded in commit order, and only changes
     belonging to a specific transaction are decoded between
     the <literal>begin</literal> and <literal>commit</literal>
     callbacks. Transactions that were rolled back explicitly or implicitly
     never get
     decoded. Successful savepoints are
     folded into the transaction containing them in the order they were
     executed within that transaction.
    </para>

    <note>
     <para>
      Only transactions that have already safely been flushed to disk will be
      decoded. That can lead to a <command>COMMIT</command> not immediately being decoded in a
      directly following <literal>pg_logical_slot_get_changes()</literal>
      when <varname>synchronous_commit</varname> is set
      to <literal>off</literal>.
     </para>
    </note>

    <sect3 id="logicaldecoding-output-plugin-startup">
     <title>Startup Callback</title>
     <para>
      The optional <function>startup_cb</function> callback is called whenever
      a replication slot is created or asked to stream changes, independent
      of the number of changes that are ready to be put out.
<programlisting>
typedef void (*LogicalDecodeStartupCB) (struct LogicalDecodingContext *ctx,
                                        OutputPluginOptions *options,
                                        bool is_init);
</programlisting>
      The <literal>is_init</literal> parameter will be true when the
      replication slot is being created and false
      otherwise. <parameter>options</parameter> points to a struct of options
      that output plugins can set:
<programlisting>
typedef struct OutputPluginOptions
{
    OutputPluginOutputType output_type;
    bool        receive_rewrites;
} OutputPluginOptions;
</programlisting>
      <literal>output_type</literal> has to either be set to
      <literal>OUTPUT_PLUGIN_TEXTUAL_OUTPUT</literal>
      or <literal>OUTPUT_PLUGIN_BINARY_OUTPUT</literal>. See also
      <xref linkend="logicaldecoding-output-mode"/>.
      If <literal>receive_rewrites</literal> is true, the output plugin will
      also be called for changes made by heap rewrites during certain DDL
      operations.  These are of interest to plugins that handle DDL
      replication, but they require special handling.
     </para>

     <para>
      The startup callback should validate the options present in
      <literal>ctx-&gt;output_plugin_options</literal>. If the output plugin
      needs to have a state, it can
      use <literal>ctx-&gt;output_plugin_private</literal> to store it.
     </para>
    </sect3>

    <sect3 id="logicaldecoding-output-plugin-shutdown">
     <title>Shutdown Callback</title>

     <para>
      The optional <function>shutdown_cb</function> callback is called
      whenever a formerly active replication slot is not used anymore and can
      be used to deallocate resources private to the output plugin. The slot
      isn't necessarily being dropped, streaming is just being stopped.
<programlisting>
typedef void (*LogicalDecodeShutdownCB) (struct LogicalDecodingContext *ctx);
</programlisting>
     </para>
    </sect3>

    <sect3 id="logicaldecoding-output-plugin-begin">
     <title>Transaction Begin Callback</title>

     <para>
      The required <function>begin_cb</function> callback is called whenever a
      start of a committed transaction has been decoded. Aborted transactions
      and their contents never get decoded.
<programlisting>
typedef void (*LogicalDecodeBeginCB) (struct LogicalDecodingContext *ctx,
                                      ReorderBufferTXN *txn);
</programlisting>
      The <parameter>txn</parameter> parameter contains meta information about
      the transaction, like the time stamp at which it has been committed and
      its XID.
     </para>
    </sect3>

    <sect3 id="logicaldecoding-output-plugin-commit">
     <title>Transaction End Callback</title>

     <para>
      The required <function>commit_cb</function> callback is called whenever
      a transaction commit has been
      decoded. The <function>change_cb</function> callbacks for all modified
      rows will have been called before this, if there have been any modified
      rows.
<programlisting>
typedef void (*LogicalDecodeCommitCB) (struct LogicalDecodingContext *ctx,
                                       ReorderBufferTXN *txn,
                                       XLogRecPtr commit_lsn);
</programlisting>
     </para>
    </sect3>

    <sect3 id="logicaldecoding-output-plugin-change">
     <title>Change Callback</title>

     <para>
      The required <function>change_cb</function> callback is called for every
      individual row modification inside a transaction, may it be
      an <command>INSERT</command>, <command>UPDATE</command>,
      or <command>DELETE</command>. Even if the original command modified
      several rows at once the callback will be called individually for each
      row.
<programlisting>
typedef void (*LogicalDecodeChangeCB) (struct LogicalDecodingContext *ctx,
                                       ReorderBufferTXN *txn,
                                       Relation relation,
                                       ReorderBufferChange *change);
</programlisting>
      The <parameter>ctx</parameter> and <parameter>txn</parameter> parameters
      have the same contents as for the <function>begin_cb</function>
      and <function>commit_cb</function> callbacks, but additionally the
      relation descriptor <parameter>relation</parameter> points to the
      relation the row belongs to and a struct
      <parameter>change</parameter> describing the row modification are passed
      in.
     </para>

     <note>
      <para>
       Only changes in user defined tables that are not unlogged
       (see <xref linkend="sql-createtable-unlogged"/>) and not temporary
       (see <xref linkend="sql-createtable-temporary"/>) can be extracted using
       logical decoding.
      </para>
     </note>
    </sect3>

    <sect3 id="logicaldecoding-output-plugin-truncate">
     <title>Truncate Callback</title>

     <para>
      The <function>truncate_cb</function> callback is called for a
      <command>TRUNCATE</command> command.
<programlisting>
typedef void (*LogicalDecodeTruncateCB) (struct LogicalDecodingContext *ctx,
                                         ReorderBufferTXN *txn,
                                         int nrelations,
                                         Relation relations[],
                                         ReorderBufferChange *change);
</programlisting>
      The parameters are analogous to the <function>change_cb</function>
      callback.  However, because <command>TRUNCATE</command> actions on
      tables connected by foreign keys need to be executed together, this
      callback receives an array of relations instead of just a single one.
      See the description of the <xref linkend="sql-truncate"/> statement for
      details.
     </para>
    </sect3>

     <sect3 id="logicaldecoding-output-plugin-filter-origin">
     <title>Origin Filter Callback</title>

     <para>
       The optional <function>filter_by_origin_cb</function> callback
       is called to determine whether data that has been replayed
       from <parameter>origin_id</parameter> is of interest to the
       output plugin.
<programlisting>
typedef bool (*LogicalDecodeFilterByOriginCB) (struct LogicalDecodingContext *ctx,
                                               RepOriginId origin_id);
</programlisting>
      The <parameter>ctx</parameter> parameter has the same contents
      as for the other callbacks. No information but the origin is
      available. To signal that changes originating on the passed in
      node are irrelevant, return true, causing them to be filtered
      away; false otherwise. The other callbacks will not be called
      for transactions and changes that have been filtered away.
     </para>
     <para>
       This is useful when implementing cascading or multidirectional
       replication solutions. Filtering by the origin allows to
       prevent replicating the same changes back and forth in such
       setups.  While transactions and changes also carry information
       about the origin, filtering via this callback is noticeably
       more efficient.
     </para>
     </sect3>

    <sect3 id="logicaldecoding-output-plugin-message">
     <title>Generic Message Callback</title>

     <para>
      The optional <function>message_cb</function> callback is called whenever
      a logical decoding message has been decoded.
<programlisting>
typedef void (*LogicalDecodeMessageCB) (struct LogicalDecodingContext *ctx,
                                        ReorderBufferTXN *txn,
                                        XLogRecPtr message_lsn,
                                        bool transactional,
                                        const char *prefix,
                                        Size message_size,
                                        const char *message);
</programlisting>
      The <parameter>txn</parameter> parameter contains meta information about
      the transaction, like the time stamp at which it has been committed and
      its XID. Note however that it can be NULL when the message is
      non-transactional and the XID was not assigned yet in the transaction
      which logged the message. The <parameter>lsn</parameter> has WAL
      location of the message. The <parameter>transactional</parameter> says
      if the message was sent as transactional or not.
      The <parameter>prefix</parameter> is arbitrary null-terminated prefix
      which can be used for identifying interesting messages for the current
      plugin. And finally the <parameter>message</parameter> parameter holds
      the actual message of <parameter>message_size</parameter> size.
     </para>
     <para>
      Extra care should be taken to ensure that the prefix the output plugin
      considers interesting is unique. Using name of the extension or the
      output plugin itself is often a good choice.
     </para>
    </sect3>

   </sect2>

   <sect2 id="logicaldecoding-output-plugin-output">
    <title>Functions for Producing Output</title>

    <para>
     To actually produce output, output plugins can write data to
     the <literal>StringInfo</literal> output buffer
     in <literal>ctx-&gt;out</literal> when inside
     the <function>begin_cb</function>, <function>commit_cb</function>,
     or <function>change_cb</function> callbacks. Before writing to the output
     buffer, <function>OutputPluginPrepareWrite(ctx, last_write)</function> has
     to be called, and after finishing writing to the
     buffer, <function>OutputPluginWrite(ctx, last_write)</function> has to be
     called to perform the write. The <parameter>last_write</parameter>
     indicates whether a particular write was the callback's last write.
    </para>

    <para>
     The following example shows how to output data to the consumer of an
     output plugin:
<programlisting>
OutputPluginPrepareWrite(ctx, true);
appendStringInfo(ctx->out, "BEGIN %u", txn->xid);
OutputPluginWrite(ctx, true);
</programlisting>
    </para>
   </sect2>
  </sect1>

  <sect1 id="logicaldecoding-writer">
   <title>Logical Decoding Output Writers</title>

   <para>
    It is possible to add more output methods for logical decoding.
    For details, see
    <filename>src/backend/replication/logical/logicalfuncs.c</filename>.
    Essentially, three functions need to be provided: one to read WAL, one to
    prepare writing output, and one to write the output
    (see <xref linkend="logicaldecoding-output-plugin-output"/>).
   </para>
  </sect1>

  <sect1 id="logicaldecoding-synchronous">
   <title>Synchronous Replication Support for Logical Decoding</title>

   <para>
    Logical decoding can be used to build
    <link linkend="synchronous-replication">synchronous
    replication</link> solutions with the same user interface as synchronous
    replication for <link linkend="streaming-replication">streaming
    replication</link>.  To do this, the streaming replication interface
    (see <xref linkend="logicaldecoding-walsender"/>) must be used to stream out
    data. Clients have to send <literal>Standby status update (F)</literal>
    (see <xref linkend="protocol-replication"/>) messages, just like streaming
    replication clients do.
   </para>

   <note>
    <para>
     A synchronous replica receiving changes via logical decoding will work in
     the scope of a single database. Since, in contrast to
     that, <parameter>synchronous_standby_names</parameter> currently is
     server wide, this means this technique will not work properly if more
     than one database is actively used.
     </para>
   </note>
  </sect1>
 </chapter>
