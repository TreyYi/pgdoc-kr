<!-- doc/src/sgml/chkpass.sgml -->

<sect1 id="chkpass" xreflabel="chkpass">
 <title>chkpass</title>

 <indexterm zone="chkpass">
  <primary>chkpass</primary>
 </indexterm>

 <para>
  암호화된 암호를 저장하기 위한 데이타 타입을 구현한 <type>chkpass</> 모듈이다.
  암호는 다양한 암호화 방식으로 변환되고,
  암호화된 상태로 저장한다.  평문 암호와 암호화된 암호를 비교 하기위해, 
  평문 암호와 비교 함수는 비교하기전에 암호화 합니다.
 </para>

 <para>
  암호가 쉽게 크랙이 가능하다고 판단되면 에러를 알리는 많은 코드들이 있다.
  하지만 현재 이것들은 아무 기능도 하지 않는다.
 </para>

 <para>
  입력 문자열 앞에 콜론을 붙인다면, 이것은 이미 암호화된 암호로 여기고, 
  더 이상 암호화 하지 않고 저장한다.
  즉, 미리 암호를 암호화하는것이 가능하다.
 </para>

 <para>
  출력은 앞에 콜론이 붙는다.  이는 덤프를 하거나 암호를 다시 저장할때, 다시 암호화를 않을수 있게 해준다.On output, a colon is prepended.  This makes it possible to dump and reload
  만약 콜론없이 출력 하고 싶다면 <function>raw()</> 함수를 사용하면 된다..
  이는 아파치의 <literal>Auth_PostgreSQL</>모듈을 사용할수 있게 해준다.
 </para>

 <para>
  암호화는 유닉스 표준함수 <function>crypt()</>을 사용하고, 
  이는 함수의 모든 제한에 영향을 받는다.  특히 처음 8문자만 고려하는 문제가 있다.
  <note>http://www.forensicswiki.org/wiki/Operating_System_Password_Encryption 참조</>
 </para>

 <para>
  <type>chkpass</type> 데이타 타입은 인덱싱되지 않는다.
  <!--
  나는 이 데이타 타입을 인덱싱 하는거에 대해 고려하지 않았다.  과연 누가
  암호화된 암호순으로 정렬된 파일이 필요할지는 의문이 들기 때문이다.
  -->
 </para>

 <para>
  간단한 사용법:
 </para>

<programlisting>
test=# create table test (p chkpass);
CREATE TABLE
test=# insert into test values ('hello');
INSERT 0 1
test=# select * from test;
       p
----------------
 :dVGkpXdOrE3ko
(1 row)

test=# select raw(p) from test;
      raw
---------------
 dVGkpXdOrE3ko
(1 row)

test=# select p = 'hello' from test;
 ?column?
----------
 t
(1 row)

test=# select p = 'goodbye' from test;
 ?column?
----------
 f
(1 row)
</programlisting>

 <sect2>
  <title>Author</title>

  <para>
   D'Arcy J.M. Cain (<email>darcy@druid.net</email>)
  </para>
 </sect2>

</sect1>
