<!-- doc/src/sgml/contrib.sgml -->

<appendix id="contrib">
 <title>부가 확장 모듈들</title>

 <para>
  이 부록과 다음 부록에는 <productname>PostgreSQL</> 배포판의 
  <literal>contrib</literal> 디렉토리에 포함 되어 있는 확장 모듈과 확장 응용 프로그램들에 대한 정보를
  다룬다.
  여기서는 소개하고 있는 포팅 도구들, 분석 도구들, 
  기본 PostgreSQL 시스템에 포함되어 있지 않은 부가 모듈들은 
  실험적이거나, 범용적이지 않은 것들이지만, 유용하게 쓰일 수 있으며, 
  충분히 안정적이다.
 </para>

 <para>
  여기서는 <literal>contrib</literal> 안에 있는 서버 확장 모듈들에 대해서 소개한다.
  부가 확장 응용 프로그램에 대해서는 <xref linkend="contrib-prog">에서 소개한다.
 </para>

 <para>
  소스 배포판에서 이 확장 모듈들은 자동으로 만들어지지 않는다. 
  만들려면, "world" 타켓을 지정해야한다 (<xref linkend="build"> 참조).
  <literal>contrib</literal> 디렉토리에서 직접 만들고 설치하려면:
<screen>
<userinput>gmake</userinput>
<userinput>gmake install</userinput>
</screen>
  이 작업은 먼저 configure 명령으로 빌드 환경이 구축되어야 한다.
  각 개별 모듈을 각각 설치하려면, 그 해당 디렉토리로 이동해서 같은 작업을
  하면 된다.  또한 많은 모듈들이 단위 테스트를 지원함으로 이 작업을 하려면
  다음 명령어로 진행할 수 있다:
<screen>
<userinput>gmake check</userinput>
</screen>
  설치 전 테스트는 다음과 같이 한다:
<screen>
<userinput>gmake installcheck</userinput>
</screen>
  이 작업은 <productname>PostgreSQL</> 서버가 실행 중이어야 한다.
 </para>

 <para>
  미리 컴파일 된 패키지들로 이 모듈을 설치하려면, 
  <productname>PostgreSQL</> 패키지들 가운데, 
  <literal>postgresql-contrib</> 이름으로 패키지 이름으로 대부분 배포된다.
  이것을 설치하면 된다.
 </para>

 <para>
  Many modules supply new user-defined functions, operators, or types.
  To make use of one of these modules, after you have installed the code
  you need to register the new SQL objects in the database system.
  In <productname>PostgreSQL</> 9.1 and later, this is done by executing
  a <xref linkend="sql-createextension"> command.  In a fresh database,
  you can simply do

<programlisting>
CREATE EXTENSION <replaceable>module_name</>;
</programlisting>

  This command must be run by a database superuser.  This registers the
  new SQL objects in the current database only, so you need to run this
  command in each database that you want
  the module's facilities to be available in.  Alternatively, run it in
  database <literal>template1</> so that the extension will be copied into
  subsequently-created databases by default.
 </para>

 <para>
  Many modules allow you to install their objects in a schema of your
  choice.  To do that, add <literal>SCHEMA
  <replaceable>schema_name</></literal> to the <command>CREATE EXTENSION</>
  command.  By default, the objects will be placed in your current creation
  target schema, typically <literal>public</>.
 </para>

 <para>
  If your database was brought forward by dump and reload from a pre-9.1
  version of <productname>PostgreSQL</>, and you had been using the pre-9.1
  version of the module in it, you should instead do

<programlisting>
CREATE EXTENSION <replaceable>module_name</> FROM unpackaged;
</programlisting>

  This will update the pre-9.1 objects of the module into a proper
  <firstterm>extension</> object.  Future updates to the module will be
  managed by <xref linkend="sql-alterextension">.
  For more information about extension updates, see
  <xref linkend="extend-extensions">.
 </para>

 <para>
  Note, however, that some of these modules are not <quote>extensions</quote>
  in this sense, but are loaded into the server in some other way, for instance
  by way of
  <xref linkend="guc-shared-preload-libraries">.  See the documentation of each
  module for details.
 </para>

 &adminpack;
 &auth-delay;
 &auto-explain;
 &btree-gin;
 &btree-gist;
 &chkpass;
 &citext;
 &cube;
 &dblink;
 &dict-int;
 &dict-xsyn;
 &dummy-seclabel;
 &earthdistance;
 &file-fdw;
 &fuzzystrmatch;
 &hstore;
 &intagg;
 &intarray;
 &isn;
 &lo;
 &ltree;
 &pageinspect;
 &passwordcheck;
 &pgbuffercache;
 &pgcrypto;
 &pgfreespacemap;
 &pgrowlocks;
 &pgstatstatements;
 &pgstattuple;
 &pgtrgm;
 &postgres-fdw;
 &seg;
 &sepgsql;
 &contrib-spi;
 &sslinfo;
 &tablefunc;
 &tcn;
 &test-parser;
 &tsearch2;
 &unaccent;
 &uuid-ossp;
 &xml2;

</appendix>

<!--
These are two separate appendixes because it is difficult to mix regular
sections (for extensions) and refentries (for programs) in one chapter or
appendix.  And we do want the programs as refentries so that we can produce man
pages.
-->

<appendix id="contrib-prog">
 <title>부가 확장 프로그램들</title>

 <para>
  This appendix and the previous one contain information regarding the modules that
  can be found in the <literal>contrib</literal> directory of the
  <productname>PostgreSQL</> distribution.  See <xref linkend="contrib"> for
  more information about the <literal>contrib</literal> section in general and
  server extensions and plug-ins found in <literal>contrib</literal>
  specifically.
 </para>

 <para>
  This appendix covers utility programs found in <literal>contrib</literal>.
  Once installed, either from source or a packaging system, they are found in
  the <filename>bin</filename> directory of the
  <productname>PostgreSQL</productname> installation and can be used like any
  other program.
 </para>

 <sect1 id="contrib-prog-client">
  <title>클라이언트 응용 프로그램들</title>

  <para>
   This section covers <productname>PostgreSQL</productname> client
   applications in <literal>contrib</literal>.  They can be run from anywhere,
   independent of where the database server resides.  See
   also <xref linkend="reference-client"> for information about client
   applications that part of the core <productname>PostgreSQL</productname>
   distribution.
  </para>

 &oid2name;
 &pgbench;
 &vacuumlo;
 </sect1>

 <sect1 id="contrib-prog-server">
  <title>서버 응용 프로그램들</title>

  <para>
   This section covers <productname>PostgreSQL</productname> server-related
   applications in <literal>contrib</literal>.  They are typically run on the
   host where the database server resides.  See also <xref
   linkend="reference-server"> for information about server applications that
   part of the core <productname>PostgreSQL</productname> distribution.
  </para>

 &pgarchivecleanup;
 &pgstandby;
 &pgtestfsync;
 &pgtesttiming;
 &pgupgrade;
 &pgxlogdump;
 </sect1>
</appendix>
