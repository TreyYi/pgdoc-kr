<!-- doc/src/sgml/pgstatstatements.sgml -->

<sect1 id="pgstatstatements" xreflabel="pg_stat_statements">
 <title>pg_stat_statements</title>

 <indexterm zone="pgstatstatements">
  <primary>pg_stat_statements</primary>
 </indexterm>

 <para>
  <filename>pg_stat_statements</filename> 모듈은 서버에서 실행 되었던 
  쿼리들에 대한 실행 통계 정보를 보여준다.
 </para>

 <para>
  이 모듈을 사용하려면, 먼저 <xref linkend="guc-shared-preload-libraries">
  서버 환경 설정 값에 <literal>pg_stat_statements</> 값이 추가 되어 있어야한다. 
  이 모듈은 추가적인 공유 메모리를 사용하기 때문에,
  이렇게 서버 환경 설정도 바꾸어야 하며, 
  이것이 적용 하기 위해서는 서버도 다시 실행 해야한다. 물론 이 모듈을 더 이상 
  사용하지 않아 추가적인 공유 메모리 사용을 하지 않으려고 할 때도 마찮가지다.
 </para>

 <sect2>
  <title><structname>pg_stat_statements</structname> 뷰</title>

  <para>
   이 모듈로 제공하는 쿼리 실행 통계 정보는 <structname>pg_stat_statements</> 이름의
   뷰로 제공된다.  이 뷰는 하나의 로우가 하나의 식별되는 쿼리를 뜻하며, 부가적으로 
   그 쿼리가 실행되었던 데이터베이스 ID, 사용자 ID등을 포함 하고 있다. (이 뷰에서 
   제공하고 있는 최대 쿼리 개수는 이 모듈 환경 설정값에 따라 결정 된다.) 
   <xref linkend="pgstatstatements-columns"> 표에서는 이 뷰의 각 칼럼에 대한 설명을 
   하고 있다.
  </para>

  <table id="pgstatstatements-columns">
   <title><structname>pg_stat_statements</> 칼럼들</title>

   <tgroup cols="4">
    <thead>
     <row>
      <entry>칼럼명</entry>
      <entry>자료형</entry>
      <entry>참조</entry>
      <entry>설명</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><structfield>userid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.oid</literal></entry>
      <entry>해당 쿼리를 실행했던 사용자의 OID</entry>
     </row>

     <row>
      <entry><structfield>dbid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-database"><structname>pg_database</structname></link>.oid</literal></entry>
      <entry>해당 쿼리를 실행했던 데이터베이스 OID</entry>
     </row>

    <row>
      <entry><structfield>query</structfield></entry>
      <entry><type>text</type></entry>
      <entry></entry>
      <entry>해당 쿼리 내용(<xref linkend="guc-track-activity-query-size"> 값으로 지정한 크기만큼만 저장됨)</entry>
     </row>

     <row>
      <entry><structfield>calls</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <entry>실행 회수</entry>
     </row>

     <row>
      <entry><structfield>total_time</structfield></entry>
      <entry><type>double precision</type></entry>
      <entry></entry>
      <entry>밀리세컨드 단위 총 실행 시간</entry>
     </row>

     <row>
      <entry><structfield>rows</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <entry>해당 쿼리로 출력한 또는 영향 받는 총 로우 개수</entry>
     </row>

     <row>
      <entry><structfield>shared_blks_hit</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <entry>Total number of shared block cache hits by the statement</entry>
     </row>

     <row>
      <entry><structfield>shared_blks_read</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <entry>Total number of shared blocks read by the statement</entry>
     </row>

     <row>
      <entry><structfield>shared_blks_dirtied</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <entry>Total number of shared blocks dirtied by the statement</entry>
     </row>

     <row>
      <entry><structfield>shared_blks_written</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <entry>Total number of shared blocks written by the statement</entry>
     </row>

     <row>
      <entry><structfield>local_blks_hit</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <entry>Total number of local block cache hits by the statement</entry>
     </row>

     <row>
      <entry><structfield>local_blks_read</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <entry>Total number of local blocks read by the statement</entry>
     </row>

     <row>
      <entry><structfield>local_blks_dirtied</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <entry>Total number of local blocks dirtied by the statement</entry>
     </row>

     <row>
      <entry><structfield>local_blks_written</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <entry>Total number of local blocks written by the statement</entry>
     </row>

     <row>
      <entry><structfield>temp_blks_read</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <entry>Total number of temp blocks read by the statement</entry>
     </row>

     <row>
      <entry><structfield>temp_blks_written</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <entry>Total number of temp blocks written by the statement</entry>
     </row>

     <row>
      <entry><structfield>blk_read_time</structfield></entry>
      <entry><type>double precision</type></entry>
      <entry></entry>
      <entry>
        블록을 디스크에서 읽는데 소비한 총 시간, 밀리세컨드
        (<xref linkend="guc-track-io-timing"> 값이 on 상태여야 함, 그렇지 않으면, 0)
      </entry>
     </row>

     <row>
      <entry><structfield>blk_write_time</structfield></entry>
      <entry><type>double precision</type></entry>
      <entry></entry>
      <entry>
        블록을 디스크로 쓰는데 소비한 총 시간, 밀리세컨드
        (<xref linkend="guc-track-io-timing"> 값이 on 상태여야 함, 그렇지 않으면, 0)
      </entry>
     </row>

    </tbody>
   </tgroup>
  </table>

  <para>
   이 뷰와, <function>pg_stat_statements_reset</> 함수는 
   <literal>pg_stat_statements</> 확장 모듈을 설치한 
   데이터베이스에서만 사용할 수 있다.  하지만, 이 모듈이 설치되어 
   서버에서 사용된다면, 이 뷰에는 모든 데이터베이스에서 사용하는 쿼리가 함께 
   통계 수집 대상이 되어 보인다.
  </para>

  <para>
   보안 문제로, 슈퍼유저가 아닌 일반 사용자는 다른 사용자의 쿼리 내용은 볼 수 없지만, 
   그것들의 통계 정보는 볼 수 있다. (물론 해당 데이터베이스 이 모듈의 확장 기능이 
   설치 되어 있는 경우를 말한다)
  </para>

  <para>
   Plannable queries (that is, <command>SELECT</>, <command>INSERT</>,
   <command>UPDATE</>, and <command>DELETE</>) are combined into a single
   <structname>pg_stat_statements</> entry whenever they have identical query
   structures according to an internal hash calculation.  Typically, two
   queries will be considered the same for this purpose if they are
   semantically equivalent except for the values of literal constants
   appearing in the query.  Utility commands (that is, all other commands)
   are compared strictly on the basis of their textual query strings, however.
  </para>

  <para>
   When a constant's value has been ignored for purposes of matching the
   query to other queries, the constant is replaced by <literal>?</literal>
   in the <structname>pg_stat_statements</> display.  The rest of the query
   text is that of the first query that had the particular hash value
   associated with the <structname>pg_stat_statements</> entry.
  </para>

  <para>
   In some cases, queries with visibly different texts might get merged into a
   single <structname>pg_stat_statements</> entry.  Normally this will happen
   only for semantically equivalent queries, but there is a small chance of
   hash collisions causing unrelated queries to be merged into one entry.
   (This cannot happen for queries belonging to different users or databases,
   however.)
  </para>

  <para>
   Since the hash value is computed on the post-parse-analysis representation
   of the queries, the opposite is also possible: queries with identical texts
   might appear as separate entries, if they have different meanings as a
   result of factors such as different <varname>search_path</> settings.
  </para>
 </sect2>

 <sect2>
  <title>함수들</title>

  <variablelist>
   <varlistentry>
   <indexterm>
    <primary>pg_stat_statements_reset</primary>
   </indexterm>

    <term>
     <function>pg_stat_statements_reset() returns void</function>
    </term>

    <listitem>
     <para>
      <function>pg_stat_statements_reset</function> discards all statistics
      gathered so far by <filename>pg_stat_statements</>.
      By default, this function can only be executed by superusers.
     </para>
    </listitem>
   </varlistentry>

  </variablelist>
 </sect2>

 <sect2>
  <title>환경설정 매개변수들</title>

  <variablelist>
   <varlistentry>
    <term>
     <varname>pg_stat_statements.max</varname> (<type>integer</type>)
    </term>

    <listitem>
     <para>
      <varname>pg_stat_statements.max</varname> is the maximum number of
      statements tracked by the module (i.e., the maximum number of rows
      in the <structname>pg_stat_statements</> view).  If more distinct
      statements than that are observed, information about the least-executed
      statements is discarded.
      The default value is 1000.
      This parameter can only be set at server start.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <varname>pg_stat_statements.track</varname> (<type>enum</type>)
    </term>

    <listitem>
     <para>
      <varname>pg_stat_statements.track</varname> controls which statements
      are counted by the module.
      Specify <literal>top</> to track top-level statements (those issued
      directly by clients), <literal>all</> to also track nested statements
      (such as statements invoked within functions), or <literal>none</> to
      disable statement statistics collection.
      The default value is <literal>top</>.
      Only superusers can change this setting.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <varname>pg_stat_statements.track_utility</varname> (<type>boolean</type>)
    </term>

    <listitem>
     <para>
      <varname>pg_stat_statements.track_utility</varname> controls whether
      utility commands are tracked by the module.  Utility commands are
      all those other than <command>SELECT</>, <command>INSERT</>,
      <command>UPDATE</> and <command>DELETE</>.
      The default value is <literal>on</>.
      Only superusers can change this setting.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <varname>pg_stat_statements.save</varname> (<type>boolean</type>)
    </term>

    <listitem>
     <para>
      <varname>pg_stat_statements.save</varname> specifies whether to
      save statement statistics across server shutdowns.
      If it is <literal>off</> then statistics are not saved at
      shutdown nor reloaded at server start.
      The default value is <literal>on</>.
      This parameter can only be set in the <filename>postgresql.conf</>
      file or on the server command line.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   The module requires additional shared memory amounting to about
   <varname>pg_stat_statements.max</varname> <literal>*</>
   <xref linkend="guc-track-activity-query-size"> bytes.  Note that this
   memory is consumed whenever the module is loaded, even if
   <varname>pg_stat_statements.track</> is set to <literal>none</>.
  </para>

  <para>
   These parameters must be set in <filename>postgresql.conf</>.
   Typical usage might be:

<programlisting>
# postgresql.conf
shared_preload_libraries = 'pg_stat_statements'

pg_stat_statements.max = 10000
pg_stat_statements.track = all
</programlisting>
  </para>
 </sect2>

 <sect2>
  <title>예제 출력</title>

<screen>
bench=# SELECT pg_stat_statements_reset();

$ pgbench -i bench
$ pgbench -c10 -t300 bench

bench=# \x
bench=# SELECT query, calls, total_time, rows, 100.0 * shared_blks_hit /
               nullif(shared_blks_hit + shared_blks_read, 0) AS hit_percent
          FROM pg_stat_statements ORDER BY total_time DESC LIMIT 5;
-[ RECORD 1 ]---------------------------------------------------------------------
query       | UPDATE pgbench_branches SET bbalance = bbalance + ? WHERE bid = ?;
calls       | 3000
total_time  | 9609.00100000002
rows        | 2836
hit_percent | 99.9778970000200936
-[ RECORD 2 ]---------------------------------------------------------------------
query       | UPDATE pgbench_tellers SET tbalance = tbalance + ? WHERE tid = ?;
calls       | 3000
total_time  | 8015.156
rows        | 2990
hit_percent | 99.9731126579631345
-[ RECORD 3 ]---------------------------------------------------------------------
query       | copy pgbench_accounts from stdin
calls       | 1
total_time  | 310.624
rows        | 100000
hit_percent | 0.30395136778115501520
-[ RECORD 4 ]---------------------------------------------------------------------
query       | UPDATE pgbench_accounts SET abalance = abalance + ? WHERE aid = ?;
calls       | 3000
total_time  | 271.741999999997
rows        | 3000
hit_percent | 93.7968855088209426
-[ RECORD 5 ]---------------------------------------------------------------------
query       | alter table pgbench_accounts add primary key (aid)
calls       | 1
total_time  | 81.42
rows        | 0
hit_percent | 34.4947735191637631
</screen>
 </sect2>

 <sect2>
  <title>만든이</title>

  <para>
   Takahiro Itagaki <email>itagaki.takahiro@oss.ntt.co.jp</email>.
   Query normalization added by Peter Geoghegan <email>peter@2ndquadrant.com</email>.
  </para>
 </sect2>

</sect1>
