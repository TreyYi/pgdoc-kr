<!--
doc/src/sgml/ref/create_policy.sgml
PostgreSQL documentation
-->

<refentry id="SQL-CREATEPOLICY">
 <indexterm zone="sql-createpolicy">
  <primary>CREATE POLICY</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>CREATE POLICY</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE POLICY</refname>
  <refpurpose>새 로우 수준 보안 정책 정의</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
CREATE POLICY <replaceable class="parameter">이름</replaceable> ON <replaceable class="parameter">테이블이름</replaceable>
    [ AS { PERMISSIVE | RESTRICTIVE } ]
    [ FOR { ALL | SELECT | INSERT | UPDATE | DELETE } ]
    [ TO { <replaceable class="parameter">롤이름</replaceable> | PUBLIC | CURRENT_USER | SESSION_USER } [, ...] ]
    [ USING ( <replaceable class="parameter">사용식</replaceable> ) ]
    [ WITH CHECK ( <replaceable class="parameter">검사식</replaceable> ) ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>설명</title>

  <para>
   <command>CREATE POLICY</command> 명령은 한 테이블에 새 로우 수준 보안
   정책을 설정한다.  이 명령을 사용하려면, 먼저 그 해당 테이블 속성 가운데
   로우 단위 보안 정책 사용이 활성화 되어 있어야 한다.
   (<command>ALTER TABLE ... ENABLE ROW LEVEL SECURITY</command> 명령으로
   활성화 한다)
  </para>

  <para>
   하나의 정책이란 정책식 검사로 해당되는 로우에 한해서 
   select, insert, update, delete 작업을 허용하는 것을 말한다.
   이미 테이블에 있는 자료에 대한 검사식은  <literal>USING</literal> 옵션으로
   지정하는 표현식을 사용하며, 
   <literal>INSERT</literal> 명령이나, <literal>UPDATE</literal> 명령으로
   새로 저장될 자료에 대한 검사는 <literal>WITH CHECK</literal> 옵션으로
   지정한는 표현식을 사용한다.
   <literal>USING</literal> 옵션의 표현식 결과가 true 값이면, 
   해당 사용자에게 그 로우를 보여주고, false나 null 이면, 보여주지 않는다.
   <literal>WITH CHECK</literal> 옵션의 표현식 결과가 true 값이면,
   해당 로우가 insert 또는 update 되며, false나 null 이면, 해당 작업을
   오류로 처리한다.
  </para>

  <para>
   <command>INSERT</command> 또는 <command>UPDATE</command> 구문 처리는
   <literal>BEFORE</literal> 트리거 처리 다음에, 
   실 자료가 변경 되기 전에,
   <literal>WITH CHECK</literal> 검사식이 수행된다.
   즉, <literal>BEFORE ROW</literal> 트리거에서 해당 자료를 조작한다면, 
   검사식 결과가 달라질 수 있다.  <literal>WITH CHECK</literal> 검사식은
   모든 제약 조건 검사보다 먼저 수행된다.
  </para>

  <para>
   정책 이름은 테이블 단위로 지정한다.  같은 정책 이름이 
   여러 테이블에 사용할 수 있으며, 이들은 각기 그 테이블과 관련된 정책을 
   설정한다.
  </para>

  <para>
   정책은 특정 명령이나, 특정 롤을 대상으로 정의할 수 있다.
   특별하게 지정하지 않으면, 모든 명령, 모든 롤 대상이다.
   하나의 명령으로 여러 정책을 한번에 정의할 수 있다.
   아래에서 자세히 설명한다.
   정책 종류와 특정 명령 사이 관계는
   <xref linkend="sql-createpolicy-summary"> 에서 요약하고 있다.
  </para>

  <para>
   하나의 정책에서 <literal>ALL</literal> 또는 
   <literal>UPDATE</literal> 명령에 대해 <literal>USING</literal>과
   <literal>WITH CHECK</literal> 구문을 함께 지정할 수 있기 때문에, 
   <literal>WITH CHECK</literal> 구문이 없는 경우에는,
   <literal>USING</literal> 에서 지정한 조건식이
   자료를 조회할 때도, 자료를 조작 할 때도 같이 사용된다.
  </para>

  <para>
   아무런 정책도 정의된 것이 없는 로우 단위 보안 기능이 활성화된 테이블이
   있다면, 그 테이블의 기본 보안 정책은 <quote>모두 금지</>다.
   조회할 수도, 자료를 조작할 수도 없다.
  </para>
 </refsect1>

 <refsect1>
  <title>매개 변수</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">이름</replaceable></term>
    <listitem>
     <para>
      새로 만들 정책 이름.  해당 테이블 내에서 유일해야 한다.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">테이블이름</replaceable></term>
    <listitem>
     <para>
      새 정책을 정의할 테이블 이름(스키마 이름 포함).
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>PERMISSIVE</literal></term>
    <listitem>
     <para>
      새 정책을 허용 정책으로 지정한다.
      여러 허용 정책이 함께 있다면, 
      <quote>OR</quote> 연산으로 판단한다.
      검사식을 통과하는 로우에 대해서 작업을 허용한다.
      정책의 기본값이 허용 정책이다.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>RESTRICTIVE</literal></term>
    <listitem>
     <para>
      새 정책을 제한 정책으로 지정한다.
      여러 제한 정책이 함께 있다면,
      <quote>AND</quote> 연산으로 판단한다.
      검사식을 통과하는 로우에 대해서 작업을 허용하지 않는다.
     </para>

     <para>
      접근을 제한하는 제한 정책을 유용하게 쓰기 위해서는
      먼저 적어도 하나 이상의 허용 정책이 만들어 두는 것이 좋다.
      제한 정책만 있으면, 접근 할 수 있는 자료가 없게 된다.
      두 정책 모두 사용하면, 두 정책 가운데, 하나라도 통과하면, 
      그 자료를 사용할 수 있게 된다.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">명령</replaceable></term>
    <listitem>
     <para>
      정책을 반영할 명령.  사용할 수 있는 값은
      <command>ALL</command>, <command>SELECT</command>,
      <command>INSERT</command>, <command>UPDATE</command>,
      <command>DELETE</command>이다.
      <command>ALL</command>이 기본값이다.
      각 명령이 어떻게 반영되는지에 대한 설명은 아래에서 한다.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">롤이름</replaceable></term>
    <listitem>
     <para>
      정책을 반영할 해당 롤.  기본값은 <literal>PUBLIC</literal>,
      모든 사용자다.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">사용식</replaceable></term>
    <listitem>
     <para>
      <acronym>SQL</acronym> 구문으로 된 조건식 (반환값은 
      <type>boolean</type> 형)
      이 조건식에 집계 함수나 원도우 함수는 사용할 수 없다.
      해당 테이블의 로우 수준 보안 속성이 활성화 되어 있다면, 
      작업 쿼리에 이 조건식이 포함되어 수행된다.
      작업이 <command>SELECT</> 인 경우,
      이 식 계산 결과가 true 면 보이고, false 또는 null 이면 
      보이지 않는다.
      한편, <command>UPDATE</> 또는 <command>DELETE</> 이면
      true면 자료 조작을 하고, false 또는 null 이면 자료 조작을
      하지 않는다.  오류로 처리하지 않고, 그냥 무시한다.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">검사식</replaceable></term>
    <listitem>
     <para>
      <acronym>SQL</acronym> 구문으로 된 조건식 (반환값은 
      <type>boolean</type> 형)
      이 조건식에 집계 함수나 원도우 함수는 사용할 수 없다.
      해당 테이블의 로우 수준 보안 속성이 활성화 되어 있다면,
      <command>INSERT</command> 및 <command>UPDATE</command>
      쿼리에 대해서 이 조건식을 계산해 
      true 면 작업을 진행하고, false 또는 null 이며
      오류로 처리한다.
      <replaceable class="parameter">검사식</replaceable> 
      대상은 기존 있는 자료가 아니라, 새로 처리될 자료가 대상임을
      기억해야 한다.
     </para>
    </listitem>
   </varlistentry>

  </variablelist>

  <refsect2>
   <title>명령별 정책</title>

   <variablelist>

     <varlistentry id="SQL-CREATEPOLICY-ALL">
      <term><literal>ALL</></term>
      <listitem>
       <para>
         <literal>ALL</literal>은 모든 명령을 뜻한다.
         <literal>ALL</literal> 대상 정책도 있고, 특정 명령 대상 정책이 
         함께 있는 경우도 모든 정책을 반영한다.  추가로,
         <literal>ALL</literal>인 경우는 <literal>USING</literal> 구문만 
         사용했다면, 그 <literal>USING</literal> 구문에서 지정한 조건식이
         자료 조작 작업 허용 여부를 결정하는데 사용된다.
       </para>
       <para>
         예를 들어, <literal>UPDATE</literal> 작업인 경우, 
         <literal>WITH CHECK</literal> 조건절이 없는 
         <literal>ALL</literal> 정책은 대상 자료를 찾는 작업에서도,
         그 자료를 갱신하는 작업에서도 <literal>USING</literal>
         조건식이 사용된다. <literal>WITH CHECK</literal> 조건절이 있으면
         자료를 찾는데는 <literal>USING</literal>을
         갱신할 때는 <literal>WITH CHECK</literal> 조건절로 검사한다.
         <literal>WITH CHECK</literal> 조건절이 있는
         <literal>ALL</literal> 정책이 있는데, 
         이 조건에 만족하지 않는
         <command>INSERT</command>, <command>UPDATE</command> 작업은 
         중지 된다.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="SQL-CREATEPOLICY-SELECT">
      <term><literal>SELECT</></term>
      <listitem>
       <para>
         <literal>SELECT</literal>는 <literal>SELECT</literal> 쿼리
         작업에 대해서만 정책을 반영한다.
         정확하게 표현하면, <literal>SELECT</literal> 명령 쿼리만
         아니라, 자료를 조회하는 모든 작업을 의미한다.
         <literal>UPDATE</literal> 작업에서 대상 자료를 찾을 때, 
         이 정책이 있다면, 이 정책을 반영해 통과한 자료를 대상으로
         자료 갱신 작업이 진행된다. <literal>DELETE</literal> 작업도
         마찬가지다.
         <literal>SELECT</literal> 명령 정책은 자료 조회 작업에 대해서만
         관여함으로 <literal>WITH CHECK</literal> 조건절을 사용할 수 없다.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="SQL-CREATEPOLICY-INSERT">
      <term><literal>INSERT</></term>
      <listitem>
       <para>
         <literal>INSERT</literal>는 <literal>INSERT</literal> 명령 작업시
         반영 되는 정책이다.  
         이 정책에 위배되면 <literal>INSERT</literal> 작업은 오류로 처리해서
         중지된다.
         <literal>INSERT</literal> 명령 정책은 자료 입력 작업에 대해서만
         관여함으로 <literal>USING</literal> 조건절을 사용할 수 없다.
       </para>
       <para>
         <literal>ON CONFLICT DO UPDATE</literal> 구문을 사용하는
         <literal>INSERT</literal> 작업에서도 
         이 정책은 오직 <literal>INSERT</literal> 작업에 대해서만
         검사한다. (insert 정책만 있고, update 정책이 없다면(모든
         update 작업 금지), 
         자료 충돌 뒤 update 작업을 진행할 때, 정책 위반으로 
         작업은 실패한다. - 옮긴이)
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="SQL-CREATEPOLICY-UPDATE">
      <term><literal>UPDATE</></term>
      <listitem>
       <para>
         <literal>UPDATE</literal>는
         <literal>UPDATE</literal>, <literal>SELECT FOR UPDATE</literal>,
         <literal>SELECT FOR SHARE</literal>,
         <literal>INSERT ... ON CONFLICT DO UPDATE</literal> 명령에 
         관여하는 정책이다.
         <literal>UPDATE</literal> 명령 정책은 <literal>USING</literal>과
         <literal>WITH CHECK</literal> 구문을 함께 지정할 수 있고,
         <literal>USING</literal> 조건식은 갱신할 자료를 찾는데 사용되고,
         <literal>WITH CHECK</literal> 조건식은 그 자료를 갱신 하는데 사용된다.
       </para>

       <para>
         <literal>WITH CHECK</literal> 조건식 검사에 통과하지 못하면, 
         오류로 처리하고 작업을 중지한다.  
         <literal>WITH CHECK</literal> 구문이 없는 경우에는,
         <literal>USING</literal> 에서 지정한 조건식이
         자료를 조회할 때도, 자료를 조작 할 때도 같이 사용된다.
       </para>

       <para>
         일반적으로 <literal>UPDATE</literal> 명령은 그 작업 대상을 뽑거나
         결과를 출력하기 위해 (<literal>WHERE</literal>이나, 
         <literal>RETURNING</literal> 구문 사용), 또는 값을 할 당하기 위한
         SET 절의 오른쪽 값을 먼저 읽어야하기 때문에, 
         먼저 <literal>SELECT</literal> 정책을 통과해야 한다. 즉
         의도하는 대로 정상 처리 되려면, 이 정책과 함께, 
         <literal>SELECT</literal> 또는 <literal>ALL</literal> 명령 정책도
         함께 지정해야 한다.
       </para>

       <para>
         또한, <literal>INSERT ... ON CONFLICT DO UPDATE</literal> 작업인
         경우에도 <literal>UPDATE</literal> 명령 정책이 필요하다.
         조심해야 할 것은 <literal>USING</literal> 조건절만 지정했다면, 
         해당 정책에 위배되어 자료가 갱신되지 못할 상황에서도 
         오류 없이 그냥 무시해 버린다는 점이다.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="SQL-CREATEPOLICY-DELETE">
      <term><literal>DELETE</></term>
      <listitem>
       <para>
         <literal>DELETE</literal>는 <literal>DELETE</literal> 명령 작업 시
         적용되는 정책이다.  이 정책에 통과된 자료만 
         <literal>DELETE</literal> 작업 대상이 된다.
         <literal>SELECT</literal> 명령 정책을 통과했다 하더라도, 
         <literal>DELETE</literal> 명령 정책의 <literal>USING</literal>
         조건절 검사에 통과 못해서 자료가 삭제 되지 않을 수도 있다.
       </para>

       <para>
         <literal>DELETE</literal> 작업은 대부분 
         자료 읽기 작업이 선행됨으로 (예, <literal>WHERE</literal>절 
         또는 <literal>RETURNING</literal>절), 
         먼저 <literal>SELECT</literal> 또는 <literal>ALL</literal> 명령
         정책을 할당해야 의도한 작업이 진행될 것이다.
       </para>

       <para>
         <literal>DELETE</literal> 명령 정책은 기존 자료의 조회만
         관여하기 때문에, <literal>WITH CHECK</literal> 조건절 구문을 
         사용할 수 없다.
       </para>
      </listitem>
     </varlistentry>

   </variablelist>

   <table id="sql-createpolicy-summary">
    <title>명령 종류에 따른 정책 반영</title>
    <tgroup cols="6">
     <colspec colnum="4" colname="update-using">
     <colspec colnum="5" colname="update-check">
     <spanspec namest="update-using" nameend="update-check" spanname="update">
     <thead>
      <row>
       <entry morerows="1">명령</entry>
       <entry><literal>SELECT/ALL 정책</literal></entry>
       <entry><literal>INSERT/ALL 정책</literal></entry>
       <entry spanname="update"><literal>UPDATE/ALL 정책</literal></entry>
       <entry><literal>DELETE/ALL 정책</literal></entry>
      </row>
      <row>
       <entry><literal>USING 사용절</literal></entry>
       <entry><literal>WITH CHECK 검사절</literal></entry>
       <entry><literal>USING 사용절</literal></entry>
       <entry><literal>WITH CHECK 검사절</literal></entry>
       <entry><literal>USING 사용절</literal></entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry><command>SELECT</command></entry>
       <entry>기존 로우</entry>
       <entry>&mdash;</entry>
       <entry>&mdash;</entry>
       <entry>&mdash;</entry>
       <entry>&mdash;</entry>
      </row>
      <row>
       <entry><command>SELECT FOR UPDATE/SHARE</command></entry>
       <entry>기존 로우</entry>
       <entry>&mdash;</entry>
       <entry>기존 로우</entry>
       <entry>&mdash;</entry>
       <entry>&mdash;</entry>
      </row>
      <row>
       <entry><command>INSERT</command></entry>
       <entry>&mdash;</entry>
       <entry>새 로우</entry>
       <entry>&mdash;</entry>
       <entry>&mdash;</entry>
       <entry>&mdash;</entry>
      </row>
      <row>
       <entry><command>INSERT ... RETURNING</command></entry>
       <entry>
        새 로우 <footnote id="rls-select-priv">
         <para>
          해당 테이블의 특정 칼럼을 읽는
          <literal>WHERE</literal> 또는 <literal>RETURNING</literal> 절에
          의해 선택되는 기존 로우 또는 새 로우
         </para>
        </footnote>
       </entry>
       <entry>새 로우</entry>
       <entry>&mdash;</entry>
       <entry>&mdash;</entry>
       <entry>&mdash;</entry>
      </row>
      <row>
       <entry><command>UPDATE</command></entry>
       <entry>
        기존 &amp; 새 로우 <footnoteref linkend="rls-select-priv">
       </entry>
       <entry>&mdash;</entry>
       <entry>기존 로우</entry>
       <entry>새 로우</entry>
       <entry>&mdash;</entry>
      </row>
      <row>
       <entry><command>DELETE</command></entry>
       <entry>
        기존 로우 <footnoteref linkend="rls-select-priv">
       </entry>
       <entry>&mdash;</entry>
       <entry>&mdash;</entry>
       <entry>&mdash;</entry>
       <entry>기존 로우</entry>
      </row>
      <row>
       <entry><command>ON CONFLICT DO UPDATE</command></entry>
       <entry>기존 &amp; 새 로우</entry>
       <entry>&mdash;</entry>
       <entry>기존 로우</entry>
       <entry>새 로우</entry>
       <entry>&mdash;</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  </refsect2>

  <refsect2>
   <title>다중 정책 적용</title>

   <para>
    하나의 작업(명령)에 여러 명령 정책이 있는 경우(예, <literal>UPDATE</literal>
    명령인데, <literal>SELECT</literal> 정책과 <literal>UPDATE</literal>
    정책을 동시에 적용해야 하는 경우), 모든 정책이 통과 되어야 
    작업이 정상적으로 수행된다.  즉, 이 두 정책의 조건식이 
    <literal>AND</literal> 연산을 하고, 그 결과가 참이여야 한다.
   </para>

   <para>
    같은 명령에 적용되는 같은 명령 정책이 여러 개 있는 경우, 
    적어도 하나는 <literal>PERMISSIVE</literal> 정책이어야 하며,
    모든 <literal>RESTRICTIVE</literal> 정책은 통과 되어야 한다.
    즉, 모든 <literal>PERMISSIVE</literal> 정책은 <literal>OR</literal>
    연산으로 묶기고, 모든 <literal>RESTRICTIVE</literal> 정책은
    <literal>AND</literal> 연산으로 묶기고, 이들의 결과를
    <literal>AND</literal> 연산으로 최종 통과를 판별한다.
    <literal>PERMISSIVE</literal> 정책이 하나도 없으면, 
    통과된 자료가 하나도 없음으로 간주한다.
   </para>

   <para>
    <literal>ALL</literal> 명령 정책은 각 명령 작업에 필요한 
    정책으로 간주한다.
   </para>

   <para>
    한 예로, <literal>UPDATE</literal> 작업 처럼 
    <literal>SELECT</literal> 명령 정책과 <literal>UPDATE</literal>
    명령 정책 둘 다 쓰이고, 같은 명령 종류 정책도 여러개 있는 경우라면, 
    다음과 같이 그 조건식을 계산한다:

<programlisting>
<replaceable>expression</replaceable> from RESTRICTIVE SELECT/ALL policy 1
AND
<replaceable>expression</replaceable> from RESTRICTIVE SELECT/ALL policy 2
AND
...
AND
(
  <replaceable>expression</replaceable> from PERMISSIVE SELECT/ALL policy 1
  OR
  <replaceable>expression</replaceable> from PERMISSIVE SELECT/ALL policy 2
  OR
  ...
)
AND
<replaceable>expression</replaceable> from RESTRICTIVE UPDATE/ALL policy 1
AND
<replaceable>expression</replaceable> from RESTRICTIVE UPDATE/ALL policy 2
AND
...
AND
(
  <replaceable>expression</replaceable> from PERMISSIVE UPDATE/ALL policy 1
  OR
  <replaceable>expression</replaceable> from PERMISSIVE UPDATE/ALL policy 2
  OR
  ...
)
</programlisting>
   </para>

  </refsect2>
 </refsect1>

 <refsect1>
  <title>참고</title>

  <para>
   정책은 테이블 소유주가 만들거나 바꿀 수 있다.
  </para>

  <para>
   정책은 해당 테이블에 적용하면, 해당 테이블을 사용하는 쿼리가
   실행 될 때 그 정책 검사를 수행하지만, 
   서버가 내부적으로 무결성 검사나, 유효성 제약 조건 검사를 할 때는
   이 정책 검사는 반영되지 않는다. 이것은 정책에 위배되지만, 
   입력된 값이 있는지 조사하는 우회적인 방법이다.
   대표적인 경우가, 특정 칼럼이 기본키나, 유니크 제약조건이 있는 경우다.
   자료를 입력하고 했는데, 이 제약 조건에 위배했다는 오류가 발생하며, 
   이미 그 자료가 있다는 판단 근거가 되어버린다.
   이 자료 볼 수 없는 정책을 적용해 놓았다고 하더라도!
   또 다른 예는 참조키 제약조건에서 이런 문제점이 있는데, 
   어느 테이블에 자료를 입력하는데, 자료가 잘 입력되면, 
   그 입력된 칼럼이 다른 테이블을 참조키였고, 그 다른 테이블은 
   해당 사용자가 볼 수 없다하더라도, 참조키가 있는 테이블에 자료가 
   입력될 수 있다는 것만으로도 볼 수 없는 테이블에 자료가 있음을 간접적으로
   알 수 있게된다.
   이러한 문제는 사용자가 레코드를 삽입, 삭제 또는 업데이트 할 수
   없도록 신중하게 정책을 세워 해결할 수 있다.
   그 정책의 조건식에서 아무 의미 없는 일련번호 형태의 값(대리키)을 
   참조하게 하거나, 다른 방법으로 알아낼 수 없는 값을 사용한다.
  </para>

  <para>
   일반적으로 신뢰할 수 없는 사용자 정의 함수를 이용해
   의도되지 않게, 보호 된 데이터가 노출될 수 있어,
   이를 방지하기 위해 사용자 쿼리에 딸린 보안 정책을 사용하여
   자료 제한 조건을 적용한다.
   그런데, <literal>LEAKPROOF</literal> 속성이 있는 연산자나, 
   함수를 사용하면, 해당 자료를 볼 수 없게 이 정책으로 막았다 하더라도,
   <literal>LEAKPROOF</literal> 속성이 우선 적용되어, 
   연산자나, 함수가 그 자료를 볼 수 있다면, 보여준다.
  </para>

  <para>
   정책에서 사용하는 표현식은 사용 쿼리에 추가됨으로,
   그 표현식 검사 작업은 그 쿼리를 실행하는 사용자 권한으로 진행된다.
   그러므로, 해당 테이블에 로우 수준 보안 기능이 활성화 되어있고, 
   그 테이블을 사용하는 쿼리를 실행해, 보안 정책의 검사 작업을 
   진행하면, 이 표현식에서 사용하는 함수나 참조 하는 테이블 등에 대해서
   사용할 수 있는 권한이 있어야한다.  없으면 권한 없음 오류가 발생한다.
   한편 뷰인 경우는 조심해야 한다.
   그 뷰에 정의된 쿼리는 그 뷰의 소유주 권한으로 실행된다.
   자료를 볼 수 있는 사용자가 해당 테이블 대상 뷰를 만들고, 
   그 뷰 대상 읽기 권한을 원래 테이블에서 자료를 볼 수 없는 사용자에게
   부여하게 되면, 그 뷰에 정의된 쿼리는 자료를 볼 수 있는 
   사용자 권한의 정책이 반영되어 자료를 볼 수 있게 된다.
  </para>

  <para>
   추가 정보와 연습용 예제는 <xref linkend="ddl-rowsecurity">에서 다룬다.
  </para>

 </refsect1>

 <refsect1>
  <title>호환성</title>

  <para>
   <command>CREATE POLICY</command> 구문은 <productname>PostgreSQL</productname>
   확장 기능이다.
  </para>
 </refsect1>

 <refsect1>
  <title>관련 항목</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alterpolicy"></member>
   <member><xref linkend="sql-droppolicy"></member>
   <member><xref linkend="sql-altertable"></member>
  </simplelist>
 </refsect1>

</refentry>
