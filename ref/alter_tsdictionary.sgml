<!--
doc/src/sgml/ref/alter_tsdictionary.sgml
PostgreSQL documentation
-->

<refentry id="sql-altertsdictionary">
 <indexterm zone="sql-altertsdictionary">
  <primary>ALTER TEXT SEARCH DICTIONARY</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>ALTER TEXT SEARCH DICTIONARY</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>ALTER TEXT SEARCH DICTIONARY</refname>
  <refpurpose>글 찾기 사전 정의 바꾸기</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
ALTER TEXT SEARCH DICTIONARY <replaceable>이름</replaceable> (
    <replaceable class="parameter">옵션</replaceable> [ = <replaceable class="parameter">값</replaceable> ] [, ... ]
)
ALTER TEXT SEARCH DICTIONARY <replaceable>이름</replaceable> RENAME TO <replaceable>새이름</replaceable>
ALTER TEXT SEARCH DICTIONARY <replaceable>이름</replaceable> OWNER TO { <replaceable>새소유주</replaceable> | CURRENT_USER | SESSION_USER }
ALTER TEXT SEARCH DICTIONARY <replaceable>이름</replaceable> SET SCHEMA <replaceable>새스키마</replaceable>
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>설명</title>

  <para>
   <command>ALTER TEXT SEARCH DICTIONARY</command> 명령은 
   글 찾기 사전의 정의를 바꾼다.
   사전 속성이나, 사전 이름이나, 그 소유주를 바꾼다.
  </para>

  <para>
   <command>ALTER TEXT SEARCH DICTIONARY</command> 명령은 해당 사전의 소유주만
   사용할 수 있다.
  </para>
 </refsect1>

 <refsect1>
  <title>매개 변수</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">이름</replaceable></term>
    <listitem>
     <para>
      해당 글 찾기 사전 이름(스키마 포함).
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">옵션</replaceable></term>
    <listitem>
     <para>
      해당 사전의 속성 이름.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">값</replaceable></term>
    <listitem>
     <para>
      해당 사전의 속성 값. = 문자와 이 값을 지정하지 않고, 
      옵션(사전 속성 이름)만 사용하면, 그 속성에 대한 
      기존 설정 값을 없애고, 초기값으로 지정한다.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">새이름</replaceable></term>
    <listitem>
     <para>
      바뀔 새 사전 이름.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">새소유주</replaceable></term>
    <listitem>
     <para>
      바뀔 새 소유주 이름.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">새스키마</replaceable></term>
    <listitem>
     <para>
      바뀔 새 스키마 이름.
     </para>
    </listitem>
   </varlistentry>
 </variablelist>

  <para>
   옵션 값 바꾸는 작업은 그 옵션의 순서는 상관 없다.
  </para>
 </refsect1>

 <refsect1>
  <title>예제</title>

  <para>
   다음은 스노우볼 기반 사전용 멈춤단어(stopword) 목록을 바꾸는 예제다.
   그 나머지 설정들은 바뀌지 않는다.
  </para>

<programlisting>
ALTER TEXT SEARCH DICTIONARY my_dict ( StopWords = newrussian );
</programlisting>

  <para>
   다음은 언어는 독일어 <literal>dutch</literal>로, 멈춤단어 목록은 사용하지 
   않도록 바꾸는 명령:
  </para>

<programlisting>
ALTER TEXT SEARCH DICTIONARY my_dict ( language = dutch, StopWords );
</programlisting>

  <para>
   다음은 아무런 속성 변경 없이 단지 해당 사전의 정의를
   <quote>새로고치는</quote> 예제:

<programlisting>
ALTER TEXT SEARCH DICTIONARY my_dict ( dummy );
</programlisting>

   이 경우는 사전 환경 설정 파일이 변경 되어 그 바뀐 점을 다시 
   반영할 때 사용하는 기법이다.
   (The reason this works is that the option removal code doesn't complain
   if there is no such option.)  This trick is useful when changing
   configuration files for the dictionary: the <command>ALTER</command> will
   force existing database sessions to re-read the configuration files,
   which otherwise they would never do if they had read them earlier.
  </para>
 </refsect1>

 <refsect1>
  <title>호환성</title>

  <para>
   <command>ALTER TEXT SEARCH DICTIONARY</command> 구문은 표준 SQL 구문이
   아니다.
  </para>
 </refsect1>

 <refsect1>
  <title>관련 항목</title>

  <simplelist type="inline">
   <member><xref linkend="sql-createtsdictionary"/></member>
   <member><xref linkend="sql-droptsdictionary"/></member>
  </simplelist>
 </refsect1>
</refentry>
